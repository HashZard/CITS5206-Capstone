<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/app/api/health.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/app/api/health.py" />
              <option name="originalContent" value="# -*- coding: utf-8 -*-&#10;# 健康检查路由&#10;from fastapi import APIRouter&#10;&#10;router = APIRouter()&#10;&#10;@router.get(&quot;/health&quot;)&#10;async def health():&#10;    return {&quot;status&quot;: &quot;ok&quot;}&#10;" />
              <option name="updatedContent" value="# -*- coding: utf-8 -*-&#10;# 健康检查路由&#10;from flask import Blueprint, jsonify&#10;&#10;bp = Blueprint('health', __name__)&#10;&#10;@bp.route('/health', methods=['GET'])&#10;def health():&#10;    return jsonify({&quot;status&quot;: &quot;ok&quot;})" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/app/api/query.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/app/api/query.py" />
              <option name="originalContent" value="# -*- coding: utf-8 -*-&#10;# 查询相关路由（Demo：演示参数化 SQL 生成）&#10;from fastapi import APIRouter, Depends&#10;from app.models.dto import QueryIn, QueryOut&#10;from app.services.orchestrator import Orchestrator, get_orchestrator&#10;&#10;router = APIRouter()&#10;&#10;@router.post(&quot;/query/demo&quot;, response_model=QueryOut)&#10;async def query_demo(qin: QueryIn, svc: Orchestrator = Depends(get_orchestrator)):&#10;    &quot;&quot;&quot;&#10;    演示路由：模拟 L1→L2→L3→Detail 的选择过程，并返回参数化 SQL。&#10;    注意：此 Demo 不依赖真实 LLM 调用与数据库执行，仅用于前后端联调演示。&#10;    &quot;&quot;&quot;&#10;    return await svc.handle_query_demo(qin)&#10;" />
              <option name="updatedContent" value="# -*- coding: utf-8 -*-&#10;# 查询相关路由（Demo：演示参数化 SQL 生成）&#10;from flask import Blueprint, request, jsonify&#10;from app.models.dto import QueryIn, QueryOut&#10;from app.services.orchestrator import Orchestrator&#10;&#10;bp = Blueprint('query', __name__)&#10;&#10;@bp.route('/query/demo', methods=['POST'])&#10;def query_demo():&#10;    &quot;&quot;&quot;&#10;    演示路由：模拟 L1→L2→L3→Detail 的选择过程，并返回参数化 SQL。&#10;    注意：此 Demo 不依赖真实 LLM 调用与数据库执行，仅用于前后端联调演示。&#10;    &quot;&quot;&quot;&#10;    data = request.get_json()&#10;    qin = QueryIn(**data)&#10;    svc = Orchestrator()&#10;    # handle_query_demo 是异步方法，这里用同步方式调用&#10;    import asyncio&#10;    result = asyncio.run(svc.handle_query_demo(qin))&#10;    return jsonify(result.dict())" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/app/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/app/main.py" />
              <option name="originalContent" value="# -*- coding: utf-8 -*-&#10;# 主应用入口：装配 FastAPI 与路由&#10;from fastapi import FastAPI&#10;from app.api.query import router as query_router&#10;from app.api.health import router as health_router&#10;&#10;app = FastAPI(title=&quot;Geo LLM API&quot;, version=&quot;1.0.0&quot;)&#10;&#10;# 健康检查&#10;app.include_router(health_router, tags=[&quot;health&quot;])&#10;# 正式 API 路径（不区分 v1）&#10;app.include_router(query_router, prefix=&quot;/api&quot;, tags=[&quot;query&quot;])&#10;" />
              <option name="updatedContent" value="# -*- coding: utf-8 -*-&#10;# 主应用入口：装配 Flask 与路由&#10;from flask import Flask&#10;from app.api.query import bp as query_bp&#10;from app.api.health import bp as health_bp&#10;&#10;app = Flask(__name__)&#10;&#10;# 注册 Blueprint 路由&#10;app.register_blueprint(health_bp, url_prefix='/api')&#10;app.register_blueprint(query_bp, url_prefix='/api')&#10;&#10;if __name__ == '__main__':&#10;    app.run(host='0.0.0.0', port=8000, debug=True)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/requirements.txt" />
              <option name="originalContent" value="fastapi==0.111.0&#10;uvicorn[standard]==0.30.1&#10;pydantic==2.7.1&#10;pydantic-settings==2.3.4&#10;httpx==0.27.0&#10;asyncpg==0.29.0&#10;redis==5.0.4&#10;" />
              <option name="updatedContent" value="flask==3.0.3&#10;pydantic==2.7.1&#10;redis==5.0.4&#10;# 其他依赖可根据实际需要添加" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>